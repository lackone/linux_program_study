#include <iostream>

using namespace std;

//TCP服务的特点
//面向连接、字节流、可靠传输
//TCP协议这种连接是一对一的，基于广播和多播的应用程序不能使用TCP服务
//TCP模块发送出的TCP报文个数和应用程序执行的写操作次数之间没有固定的数量关系
//应用程序执行的读操作次数和TCP模块接收到的TCP报文段个数之间也没有固定的数量关系
//发送端执行的写操作次数 和 接收端执行的读操作次数之间没有任何数量关系，这就是 字节流的 概念。

//TCP头部结构
// 16位源端口号 + 16位目的端口号
// 32位序号 （ISN初始序号值+字节流中的偏移）
// 32位确认号 （接收到的TCP报文段序号+1）
// 4位头部长度（多少个4字节，TCP头部最长60字节） + 6位保留 + URG（紧急指针是否有效） + ACK（确认号是否有效） + PSH（立即读走数据，腾出空间） + RST（重新建立连接） + SYN（请求建立连接） + FIN（关闭连接） + 16位窗口大小
// 16位校验和 + 16位紧急指针
// 选项，最多40字节

//TCP头部选项
//kind=0 结束选项
//kind=1  空操作
//kind=2  最大报文段长度选项 MSS=1500-40=1460
//kind=3  窗口扩大因子选项
//kind=4  选择性确认（SACK）TCP报文丢失，不用重传后续所有报文
//kind=5  SACK实际工作的选项，
//kind=8  时间戳选项

//IP 127.0.0.1.43932 > 127.0.0.1.telnet: Flags [S], seq 3037026495, win 65495, options [mss 65495,sackOK,TS val 1786941653 ecr 0,nop,wscale 7], length 0
//    0x0000:  4510 003c 44b0 4000 4006 f7f9 7f00 0001
//    0x0010:  7f00 0001 ab9c 0017 b505 58bf 0000 0000
//    0x0020:  a002 ffd7 fe30 0000 0204 ffd7 0402 080a
//    0x0030:  6a82 90d5 0000 0000 0103 0307
// 前20字节是IP头，从 ab9c 开始是 TCP头

//0xab9c  43932 源端口号
//0x0017  23目的端口号
//0xb50558bf   3037026495 序号
//0x00000000   确认号
//0xa          10，10个4字节，40字节
//0x002        设置了SYN标志
//0xffd7       65495窗口大小
//0xfe30       头部校验和
//0x0000       没设置URG，紧急指针值无意义
//0x0204       kind=2，length=4
//0xffd7       65495,最大报文段长度
//0x0402       kind=4, length=2，允许SACK
//0x080a       kind=8, length=10
//0x6a8290d5   时间戳
//0x00000000   回显应答时间戳
//0x01         kind=1 空操作
//0x0303       kind=3，length=3 窗口扩大因子选项
//0x07         窗口扩大因子为7

//TCP状态转移
//服务器
//通过 listen() 进入 LISTEN状态，被动等待连接，一旦有连接，向客户端发送 SYN，此时 SYN_RCVD 状态，如果收到确认报文，进入 ESTABLISHED 状态。
//客户端主动 close时，服务器返回确认报文后 进入 CLOSE_WAIT 状态，检测到客户端关闭，立即发送报文，进入 LAST_ACK 状态，等待客户端最后确认。

//客户端
//通过 connect() 建立连接，发送同步报文，转移到 SYN_SENT 状态，调用失败则 CLOSED 状态，成功 ESTABLISHED 状态。
//客户端主动关闭，进入 FIN_WAIT_1 状态，收到服务器确认报文，进入 FIN_WAIT_2 状态。如果服务器发送结束报文，则进入 TIME_WAIT 状态

//TIME_WAIT状态
//1、可靠地终止TCP连接
//2、保证让迟来的TCP报文段有足够的时间被识别并丢弃

//复位报文段
//1、访问不存在的端口
//2、异常终止连接
//3、处理半打开连接

//带外数据
//TCP利用头部中紧急指针标志和紧急指针两个字段，给应用程序提供了一种紧急方式。

//TCP超时重传
// /proc/sys/net/ipv4/tcp_retries1 最少执行的重传次数
// /proc/sys/net/ipv4/tcp_retries2 最多可以执行的重传次数

int main() {
    return 0;
}
